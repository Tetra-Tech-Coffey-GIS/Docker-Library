{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4aca1c6f-d82f-410f-ad44-d75eb029d024",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Water Sampling survey code to stack data\n",
    "\n",
    "## Code for R1-R15 PRE-STABILIZED **WELL_PURGED YES** \n",
    "\n",
    "import pandas as pd\n",
    "from tkinter import Tk, filedialog\n",
    "\n",
    "    # Set pandas display options for better readability\n",
    "pd.set_option('display.max_rows', None)  # Display all rows\n",
    "pd.set_option('display.max_columns', None)  # Display all columns\n",
    "pd.set_option('display.width', None)  # Auto-adjust width\n",
    "\n",
    "    # Function to get the file path using a file explorer\n",
    "def get_file_path():\n",
    "    root = Tk()\n",
    "    root.withdraw()  # Hide the main window\n",
    "    file_path = filedialog.askopenfilename(title=\"Select CSV file\")\n",
    "    return file_path\n",
    "\n",
    "    # Function to get the folder path and desired output filename using a file explorer\n",
    "def get_output_path_and_filename():\n",
    "    root = Tk()\n",
    "    root.withdraw()  # Hide the main window\n",
    "    output_csv_path = filedialog.asksaveasfilename(\n",
    "        title=\"Specify Output File\",\n",
    "        defaultextension=\".csv\",\n",
    "        filetypes=[(\"CSV files\", \"*.csv\")]\n",
    "    )\n",
    "    \n",
    "    return output_csv_path\n",
    "\n",
    "    # Read the CSV file into a pandas DataFrame\n",
    "input_csv_path = get_file_path()\n",
    "df = pd.read_csv(input_csv_path)\n",
    "\n",
    "\n",
    "    # Define mapping for column headings\n",
    "column_mapping = {\n",
    "    'locationid': 'Location ID',\n",
    "    'sampleid': 'Sample ID',\n",
    "    'sampling_datetime': 'Sample Date and Time',\n",
    "    'sampling_method': 'Sampling method',\n",
    "    'sampling_method_other': 'Sampling method (if Other)',\n",
    "    'sampling_status': 'Sampling status',\n",
    "    'gauging_datetime': 'Gauging date and time',\n",
    "    'toc_stickup_mm': 'Top of casing stickup (mm)',\n",
    "    'well_depth_mbtoc': 'Well depth (mbTOC)',\n",
    "    'depth_to_water_mbtoc': 'Depth to water (mbTOC)',\n",
    "    'depth_to_napl_mbtoc': 'Depth to NAPL (mBTOC)',\n",
    "    'napl_thickness_mm': 'NAPL thickness (mm)',\n",
    "    'voc_field_meaurement_ppm': 'VOC Field Measurement (ppm)',\n",
    "    'w_comments': 'Comments',\n",
    "    'odour': 'Odour',\n",
    "    'odour_strength': 'Odour Strength',\n",
    "    'colour': 'Colour',\n",
    "    'turbidity': 'Turbidity',\n",
    "    'sheen': 'Sheen present?',\n",
    "    'comments': 'Sampling Comments'\n",
    "}\n",
    "\n",
    "    # Rename columns based on the mapping\n",
    "df.rename(columns=column_mapping, inplace=True)\n",
    "\n",
    "columns_to_keep = [\n",
    "    'objectid',\n",
    "    'globalid',\n",
    "    'Location ID',\n",
    "    'Sample ID',\n",
    "    'Sample Date and Time',\n",
    "    'Sampling method',\n",
    "    'Sampling method (if Other)',\n",
    "    'Sampling status',\n",
    "    'Gauging date and time',\n",
    "    'Top of casing stickup (mm)',\n",
    "    'Well depth (mbTOC)',\n",
    "    'Depth to water (mbTOC)',\n",
    "    'Depth to NAPL (mBTOC)',\n",
    "    'NAPL thickness (mm)',\n",
    "    'VOC Field Measurement (ppm)',\n",
    "    'Comments',\n",
    "    'r_value',\n",
    "    'PreStab_samplingdatetime',\n",
    "    'PreStab_purgevolume_l',\n",
    "    'PreStab_do_mgl',\n",
    "    'PreStab_ec_mscm',\n",
    "    'PreStab_ph',\n",
    "    'PreStab_redox_mv',\n",
    "    'PreStab_temperature',\n",
    "    'Odour',\n",
    "    'Odour Strength',\n",
    "    'Colour',\n",
    "    'Turbidity',\n",
    "    'Sheen present?',\n",
    "    'Sampling Comments'\n",
    "]\n",
    "\n",
    "data_list = []\n",
    "\n",
    "\n",
    "for index, row in df.iterrows():\n",
    "    for i in range(1, 16):\n",
    "        prefix = f'r{i}_'\n",
    "        new_row = row.to_dict()\n",
    "        new_row.update({\n",
    "            'r_value': f'r{i}',\n",
    "            'PreStab_samplingdatetime': row[prefix + 'samplingdatetime'],\n",
    "            'PreStab_purgevolume_l': row[prefix + 'purgevolume_l'],\n",
    "            'PreStab_do_mgl': row[prefix + 'do_mgl'],\n",
    "            'PreStab_ec_mscm': row[prefix + 'ec_mscm'],\n",
    "            'PreStab_ph': row[prefix + 'ph'],\n",
    "            'PreStab_redox_mv': row[prefix + 'redox_mv'],\n",
    "            'PreStab_temperature': row[prefix + 'temperature']\n",
    "        })\n",
    "        data_list.append(new_row)\n",
    "\n",
    "    # Create a DataFrame from the list of dictionaries\n",
    "new_df = pd.DataFrame(data_list, columns=columns_to_keep)\n",
    "\n",
    "    # Get the desired output CSV path from the user\n",
    "output_csv_path = get_output_path_and_filename()\n",
    "\n",
    "    # Write the new DataFrame to a CSV file\n",
    "new_df.to_csv(output_csv_path, index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "455e4cff-e857-49be-b4fc-b6e0ab1da6ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Water Sampling survey code to stack data\n",
    "\n",
    "##  PRE/POST-STABILIZED **WELL_PURGED NO**\n",
    "\n",
    "import pandas as pd\n",
    "from tkinter import Tk, filedialog\n",
    "\n",
    "    # Set pandas display options for better readability\n",
    "pd.set_option('display.max_rows', None)  # Display all rows\n",
    "pd.set_option('display.max_columns', None)  # Display all columns\n",
    "pd.set_option('display.width', None)  # Auto-adjust width\n",
    "\n",
    "    # Function to get the file path using a file explorer\n",
    "def get_file_path():\n",
    "    root = Tk()\n",
    "    root.withdraw()  # Hide the main window\n",
    "    file_path = filedialog.askopenfilename(title=\"Select CSV file\")\n",
    "    return file_path\n",
    "    \n",
    "    # Function to get the folder path and desired output filename using a file explorer\n",
    "def get_output_path_and_filename():\n",
    "    root = Tk()\n",
    "    root.withdraw()  # Hide the main window\n",
    "    output_csv_path = filedialog.asksaveasfilename(\n",
    "        title=\"Specify Output File\",\n",
    "        defaultextension=\".csv\",\n",
    "        filetypes=[(\"CSV files\", \"*.csv\")]\n",
    "    )\n",
    "    return output_csv_path\n",
    "\n",
    "    # Read the CSV file into a pandas DataFrame\n",
    "input_csv_path = get_file_path()\n",
    "df = pd.read_csv(input_csv_path)\n",
    "\n",
    "\n",
    "    \n",
    "    # Define mapping for column headings\n",
    "column_mapping = {\n",
    "    'locationid': 'Location ID',\n",
    "    'sampleid': 'Sample ID',\n",
    "    'sampling_datetime': 'Sample Date and Time',\n",
    "    'sampling_method': 'Sampling method',\n",
    "    'sampling_method_other': 'Sampling method (if Other)',\n",
    "    'sampling_status': 'Sampling status',\n",
    "    'gauging_datetime': 'Gauging date and time',\n",
    "    'toc_stickup_mm': 'Top of casing stickup (mm)',\n",
    "    'well_depth_mbtoc': 'Well depth (mbTOC)',\n",
    "    'depth_to_water_mbtoc': 'Depth to water (mbTOC)',\n",
    "    'depth_to_napl_mbtoc': 'Depth to NAPL (mBTOC)',\n",
    "    'napl_thickness_mm': 'NAPL thickness (mm)',\n",
    "    'voc_field_meaurement_ppm': 'VOC Field Measurement (ppm)',\n",
    "    'w_comments': 'Comments',\n",
    "    'odour': 'Odour',\n",
    "    'odour_strength': 'Odour Strength',\n",
    "    'colour': 'Colour',\n",
    "    'turbidity': 'Turbidity',\n",
    "    'sheen': 'Sheen present?',\n",
    "    'comments': 'Sampling Comments'\n",
    "}\n",
    "\n",
    "\n",
    "    # Rename columns using the provided mapping\n",
    "df = df.rename(columns=column_mapping)\n",
    "\n",
    "columns_to_keep = [\n",
    "    'objectid',\n",
    "    'globalid',\n",
    "    'Location ID',\n",
    "    'Sample ID',\n",
    "    'Sample Date and Time',\n",
    "    'Sampling method',\n",
    "    'Sampling method (if Other)',\n",
    "    'Sampling status',\n",
    "    'Gauging date and time',\n",
    "    'Top of casing stickup (mm)',\n",
    "    'Well depth (mbTOC)',\n",
    "    'Depth to water (mbTOC)',\n",
    "    'Depth to NAPL (mBTOC)',\n",
    "    'NAPL thickness (mm)',\n",
    "    'VOC Field Measurement (ppm)',\n",
    "    'Comments',\n",
    "    'Pre/Post samplingdatetime',\n",
    "    'Pre/Post collection_method',\n",
    "    'Pre/Post WQM depth',\n",
    "    'Pre/Post do_mgl',\n",
    "    'Pre/Post ec_mscm',\n",
    "    'Pre/Post ph',\n",
    "    'Pre/Post redox_mv',\n",
    "    'Pre/Post temperature',\n",
    "    'Odour',\n",
    "    'Odour Strength',\n",
    "    'Colour',\n",
    "    'Turbidity',\n",
    "    'Sheen present?',\n",
    "    'Sampling Comments'\n",
    "]\n",
    "    # Create new rows for 'pre_stab' and 'post_stab' columns\n",
    "data_list = []\n",
    "\n",
    "for index, row in df.iterrows():\n",
    "    for prefix in ['pre_stab_', 'post_stab_']:\n",
    "        new_row = row.to_dict()\n",
    "        new_row.update({\n",
    "            'Pre/Post samplingdatetime': row[prefix + 'samplingdatetime'],\n",
    "            'Pre/Post collection_method': row[prefix + 'collection_method'],\n",
    "            'Pre/Post WQM depth': row[prefix + 'wqm_depth_mbtoc'],\n",
    "            'Pre/Post do_mgl': row[prefix + 'do_mgl'],\n",
    "            'Pre/Post ec_mscm': row[prefix + 'ec_mscm'],\n",
    "            'Pre/Post ph': row[prefix + 'ph'],\n",
    "            'Pre/Post redox_mv': row[prefix + 'redox_mv'],\n",
    "            'Pre/Post temperature': row[prefix + 'temperature']\n",
    "        })\n",
    "        data_list.append(new_row)\n",
    "\n",
    "    # Create a DataFrame from the list of dictionaries\n",
    "new_df = pd.DataFrame(data_list, columns=columns_to_keep)\n",
    "\n",
    "    # Get the desired output CSV path from the user\n",
    "output_csv_path = get_output_path_and_filename()\n",
    "\n",
    "    # Write the new DataFrame to a CSV file\n",
    "new_df.to_csv(output_csv_path, index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "171754fe-3a05-4b0f-ae1b-1abeb38e07ac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mapping completed. Data saved to: C:/Users/gangul.atapattu/Downloads/Dow/dfdsf.csv\n"
     ]
    }
   ],
   "source": [
    "# Code for Transforming stacked data into ESDAT Import Template\n",
    "\n",
    "## R1-R15 PRE-STABILIZED  WELL_PURGED YES ESDAT IMPORT TEMPLATE.\n",
    "\n",
    "\n",
    "import pandas as pd\n",
    "from tkinter import Tk, filedialog\n",
    "\n",
    "    # Function to open file dialog for selecting input CSV file\n",
    "def browse_input_file():\n",
    "    Tk().withdraw()  # Hide the main window\n",
    "    file_path = filedialog.askopenfilename(title=\"Select PURGED Input CSV File\", filetypes=[(\"CSV files\", \"*.csv\")])\n",
    "    return file_path\n",
    "\n",
    "    # Function to open file dialog for selecting output CSV file\n",
    "def browse_output_file():\n",
    "    Tk().withdraw()  # Hide the main window\n",
    "    file_path = filedialog.asksaveasfilename(title=\"Save As\", defaultextension=\".csv\", filetypes=[(\"CSV files\", \"*.csv\")])\n",
    "    return file_path\n",
    "\n",
    "    # Read the input CSV file\n",
    "input_csv_path = browse_input_file()\n",
    "df = pd.read_csv(input_csv_path)\n",
    "\n",
    "    # Create a new DataFrame with the extended template and multi-level headers\n",
    "new_df = pd.DataFrame({\n",
    "    'Site': '',  # Placeholder for 'Site'\n",
    "    'Sample Code': df['Sample ID'],\n",
    "    'Field ID': '',  # Placeholder for 'Field ID'\n",
    "    'Sampled Date Time': df['PreStab_samplingdatetime'],\n",
    "    'Sampling Method': df['Sampling method'],\n",
    "    'Location Code': df['Location ID'],\n",
    "    'Well': '',  # Placeholder for 'Well'\n",
    "    'Sample Depth From': df['Depth to water (mbTOC)'],\n",
    "    'Sample Depth To': '',\n",
    "    'Matrix Type': 'Water',  # Constant value\n",
    "    'Sample Type': 'Normal',  # Constant value\n",
    "    'Sample Comments': df['Comments'] + '. ' + df['Odour'] + '. '+ df['Odour Strength'] + '. '+ df['Colour'] + '. '+ df['Turbidity'] + '. '+ df['Sheen present?'] + '. '+ df['Sampling Comments'] + '. ',\n",
    "    'Lab Name': 'Field',  # Constant value\n",
    "    'Lab Report Number': 'Field',  # Constant value,\n",
    "    'Purgevolume_Field': df['PreStab_purgevolume_l'],\n",
    "    'DO_Field': df['PreStab_do_mgl'],\n",
    "    'EC_Field': df['PreStab_ec_mscm'],\n",
    "    'pH_Field': df['PreStab_ph'],\n",
    "    'Redox_Field': df['PreStab_redox_mv'],\n",
    "    'Temp_Field': df['PreStab_temperature']\n",
    "})\n",
    "\n",
    "    # Create multi-level headers for specific columns\n",
    "new_df.columns = pd.MultiIndex.from_tuples([\n",
    "    ('Site', ''),\n",
    "    ('Sample Code', ''),\n",
    "    ('Field ID', ''),\n",
    "    ('Sampled Date Time', ''),\n",
    "    ('Sampling Method', ''),\n",
    "    ('Location Code', ''),\n",
    "    ('Well', ''),\n",
    "    ('Sample Depth From', ''),\n",
    "    ('Sample Depth To', ''),\n",
    "    ('Matrix Type', ''),\n",
    "    ('Sample Type', ''),\n",
    "    ('Sample Comments', ''),\n",
    "    ('Lab Name', ''),\n",
    "    ('Lab Report Number', ''),\n",
    "    ('Purge_Volume', 'Purge volume (Field)', 'l'),\n",
    "    ('DO_Field', 'DO (Field)', 'mg/L'),\n",
    "    ('EC_Field', 'Field Electrical Conductivity', 'µS/cm'),\n",
    "    ('pH_Field', 'pH (Field)', '-'),\n",
    "    ('Redox_Field', 'Redox Potential (Field)', 'mV'),\n",
    "    ('Temp_Field', 'Temp (Field)', 'oC')\n",
    "])\n",
    "\n",
    "\n",
    "    # Define the path for the new mapped CSV file\n",
    "output_mapped_csv_file_path = browse_output_file()\n",
    "\n",
    "    # Export the mapped data to a new CSV file\n",
    "new_df.to_csv(output_mapped_csv_file_path, index=False)\n",
    "\n",
    "print(f\"Mapping completed. Data saved to: {output_mapped_csv_file_path}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0e46f2d9-24db-4b27-a673-cd42e1a6892b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Code for Transforming stacked data into ESDAT Import Template\n",
    "\n",
    "## PRE/POST -STABILIZED  WELL_PURGED NO ESDAT IMPORT TEMPLATE \n",
    "\n",
    "\n",
    "import pandas as pd\n",
    "from tkinter import Tk, filedialog\n",
    "\n",
    "    # Function to open file dialog for selecting input CSV file\n",
    "def browse_input_file():\n",
    "    Tk().withdraw()  # Hide the main window\n",
    "    file_path = filedialog.askopenfilename(title=\"Select NOT PURGED Input CSV File\", filetypes=[(\"CSV files\", \"*.csv\")])\n",
    "    return file_path\n",
    "\n",
    "    # Function to open file dialog for selecting output CSV file\n",
    "def browse_output_file():\n",
    "    Tk().withdraw()  # Hide the main window\n",
    "    file_path = filedialog.asksaveasfilename(title=\"Save As\", defaultextension=\".csv\", filetypes=[(\"CSV files\", \"*.csv\")])\n",
    "    return file_path\n",
    "\n",
    "    # Read the input CSV file\n",
    "input_csv_path = browse_input_file()\n",
    "df = pd.read_csv(input_csv_path)\n",
    "\n",
    "    # Create a new DataFrame with the extended template and multi-level headers\n",
    "new_df = pd.DataFrame({\n",
    "    'Site': '',  # Placeholder for 'Site'\n",
    "    'Sample Code': df['Sample ID'],\n",
    "    'Sampling Method': df['Sampling method'],\n",
    "    'Field ID': '',  # Placeholder for 'Field ID'\n",
    "    'Sampled Date Time': df['Pre/Post samplingdatetime'],\n",
    "    'Location Code': df['Location ID'],\n",
    "    'Well': '',  # Placeholder for 'Well'\n",
    "    'Sample Depth From': df['Depth to water (mbTOC)'],\n",
    "    'Sample Depth To': '',\n",
    "    'Matrix Type': 'Water',  # Constant value\n",
    "    'Sample Type': 'Normal',  # Constant value\n",
    "    'Sample Comments': df['Comments'] + '. ' + df['Odour'] + '. '+ df['Odour Strength'] + '. '+ df['Colour'] + '. '+ df['Turbidity'] + '. '+ df['Sheen present?'] + '. '+ df['Sampling Comments'] + '. ',\n",
    "    'Lab Name': 'Field',  # Constant value\n",
    "    'Lab Report Number': 'Field',  # Constant value,\n",
    "    'DO_Field': df['Pre/Post do_mgl'],\n",
    "    'EC_Field': df['Pre/Post ec_mscm'],\n",
    "    'pH_Field': df['Pre/Post ph'],\n",
    "    'Redox_Field': df['Pre/Post redox_mv'],\n",
    "    'Temp_Field': df['Pre/Post temperature']\n",
    "})\n",
    "\n",
    "    # Create multi-level headers for specific columns\n",
    "new_df.columns = pd.MultiIndex.from_tuples([\n",
    "    ('Site', ''),\n",
    "    ('Sample Code', ''),\n",
    "    ('Sampling Method', ''),\n",
    "    ('Field ID', ''),\n",
    "    ('Sampled Date Time', ''),\n",
    "    ('Location Code', ''),\n",
    "    ('Well', ''),\n",
    "    ('Sample Depth From', ''),\n",
    "    ('Sample Depth To', ''),\n",
    "    ('Matrix Type', ''),\n",
    "    ('Sample Type', ''),\n",
    "    ('Sample Comments', ''),\n",
    "    ('Lab Name', ''),\n",
    "    ('Lab Report Number', ''),\n",
    "    ('DO_Field', 'DO (Field)', 'mg/L'),\n",
    "    ('EC_Field', 'Field Electrical Conductivity', 'µS/cm'),\n",
    "    ('pH_Field', 'pH (Field)', '-'),\n",
    "    ('Redox_Field', 'Redox Potential (Field)', 'mV'),\n",
    "    ('Temp_Field', 'Temp (Field)', 'oC')\n",
    "])\n",
    "\n",
    "\n",
    "    # Define the path for the new mapped CSV file\n",
    "output_mapped_csv_file_path = browse_output_file()\n",
    "\n",
    "    # Export the mapped data to a new CSV file\n",
    "new_df.to_csv(output_mapped_csv_file_path, index=False)\n",
    "\n",
    "print(f\"Mapping completed. Data saved to: {output_mapped_csv_file_path}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2901b416-b7db-44b2-9427-18d2c0931037",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Code for LOCATION VISIT TEMPLATE \n",
    "\n",
    "\n",
    "import pandas as pd\n",
    "from tkinter import Tk, filedialog\n",
    "\n",
    "def process_csv(input_file, output_file):\n",
    "    # Read the input CSV file\n",
    "    df = pd.read_csv(input_file)\n",
    "\n",
    "    # Extract desired columns\n",
    "    new_df = df[['Location ID', 'Sample Date and Time']]\n",
    "\n",
    "    # Rename columns\n",
    "    new_df.columns = ['Location Code', 'Arrival Date']\n",
    "\n",
    "    # Remove duplicates based on Location Code\n",
    "    new_df = new_df.drop_duplicates(subset='Location Code', keep='first')\n",
    "\n",
    "    # Write to the new CSV file\n",
    "    new_df.to_csv(output_file, index=False)\n",
    "\n",
    "    print(f\"New CSV file '{output_file}' created successfully.\")\n",
    "\n",
    "def browse_file():\n",
    "    root = Tk()\n",
    "    root.withdraw()  # Hide the main window\n",
    "\n",
    "    # Open a file dialog for the user to select the input CSV file\n",
    "    input_file = filedialog.askopenfilename(title=\"Select Input CSV File\", filetypes=((\"CSV files\", \"*.csv\"), (\"All files\", \"*.*\")))\n",
    "\n",
    "    if input_file:\n",
    "        # Open a file dialog for the user to select the output file name and location\n",
    "        output_file = filedialog.asksaveasfilename(title=\"Save Output CSV As\", defaultextension=\".csv\", filetypes=((\"CSV files\", \"*.csv\"), (\"All files\", \"*.*\")))\n",
    "\n",
    "        if output_file:\n",
    "            process_csv(input_file, output_file)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    browse_file()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "abf47b43-7f74-429f-81e5-ad7a5473fd1c",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Code for MONITORING ROUND TEMPLATE \n",
    "\n",
    "import pandas as pd\n",
    "from tkinter import Tk, filedialog\n",
    "from datetime import datetime\n",
    "\n",
    "def process_csv(input_file, output_file):\n",
    "    # Read the input CSV file\n",
    "    df = pd.read_csv(input_file)\n",
    "\n",
    "    # Extract desired columns and convert 'Sample Date and Time' to MM-YYYY format\n",
    "    df['Sample Date'] = pd.to_datetime(df['Sample Date and Time']).dt.strftime('%m-%Y')\n",
    "    new_df = df[['Location ID', 'Sample Date']]\n",
    "\n",
    "    # Rename columns\n",
    "    new_df.columns = ['Location Code', 'Sample Date']\n",
    "\n",
    "    # Remove duplicates based on Location Code\n",
    "    new_df = new_df.drop_duplicates(subset='Location Code', keep='first')\n",
    "\n",
    "    # Write to the new CSV file\n",
    "    new_df.to_csv(output_file, index=False)\n",
    "\n",
    "    print(f\"New CSV file '{output_file}' created successfully.\")\n",
    "\n",
    "def browse_file():\n",
    "    root = Tk()\n",
    "    root.withdraw()  # Hide the main window\n",
    "\n",
    "    # Open a file dialog for the user to select the input CSV file\n",
    "    input_file = filedialog.askopenfilename(title=\"Select Input CSV File\", filetypes=((\"CSV files\", \"*.csv\"), (\"All files\", \"*.*\")))\n",
    "\n",
    "    if input_file:\n",
    "        # Open a file dialog for the user to select the output file name and location\n",
    "        output_file = filedialog.asksaveasfilename(title=\"Save Output CSV As\", defaultextension=\".csv\", filetypes=((\"CSV files\", \"*.csv\"), (\"All files\", \"*.*\")))\n",
    "\n",
    "        if output_file:\n",
    "            process_csv(input_file, output_file)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    browse_file()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}